// =====================================
// Return mixed color by his key and variant name.
//
// @see https://material.io/design/color/the-color-system.html#color-usage-palettes
//
// Official Material palette is handcrafted, so this function mix colors close
// as possible, but there is not 100% match.
// @see https://github.com/mbitson/mcg/issues/94#issuecomment-277840806
// ====================================
@function color-palette($color, $variant: 500) {
  @if ($variant == 50) {
    @return lighten($color, 52%);
  }
  @else if ($variant == 100) {
    @return lighten($color, 37%);
  }
  @else if ($variant == 200) {
    @return lighten($color, 26%);
  }
  @else if ($variant == 300) {
    @return lighten($color, 12%);
  }
  @else if ($variant == 400) {
    @return lighten($color, 6%);
  }
  @else if ($variant == 500) {
    @return $color;
  }
  @else if ($variant == 600) {
    @return darken($color, 6%);
  }
  @else if ($variant == 700) {
    @return darken($color, 12%);
  }
  @else if ($variant == 800) {
    @return darken($color, 18%);
  }
  @else if ($variant == 900) {
    @return darken($color, 24%);
  }
  @else if ($variant == A100) {
    @return saturate(lighten($color, 50%), 30%);
  }
  @else if ($variant == A200) {
    @return saturate(lighten($color, 30%), 30%);
  }
  @else if ($variant == A400) {
    @return saturate(lighten($color, 10%), 15%);
  }
  @else if ($variant == A700) {
    @return saturate(lighten($color, 5%), 5%);
  }
  @else {
    @error "Sorry, but "#{$variant}" is not a valid value for $variant. Available values: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700."
  }
}

// =====================================
// Compares contrast of a given color to the light/dark arguments and returns
// whichever is most "contrasty".
// ====================================
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  @if $color == null {
    @return null;
  } @else {
    $yiq: (red($color) * 299 + green($color) * 587 + blue($color) * 114) / 1000;
    @return if($yiq >= 128, $dark, $light);
  }
}

// =====================================
// Return color by his key.
// ====================================
@function color($key: blue) {
  @return map-get($colors, $key);
}

// =====================================
// Return mixed color by his key.
// ====================================
@function color-level($color-name: primary, $level: 0) {
  $color: color($color-name);
  $color-base: if($level > 0, #000000, #FFFFFF);
  $level: abs($level);
  @return mix($color-base, $color, $level * $theme-color-interval);
}

// =====================================
// Return color by his key.
// ====================================
@function theme-color($key: primary) {
  @return map-get($theme-colors, $key);
}

// =====================================
// Return mixed color by his key.
// ====================================
@function theme-color-level($color-name: primary, $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, #000000, #FFFFFF);
  $level: abs($level);
  @return mix($color-base, $color, $level * $theme-color-interval);
}

// =====================================
// Return grey color by his key.
// ====================================
@function gray($key: 100) {
  @return map-get($grays, $key);
}
