/**
 * @file
 * Mixin file
 */

// Import functions.
@import "functions";

/**
 * Font size calculation.
 */
@mixin font-size($size) {
  font-size: $size;
  font-size: pxtorem($size);
}

/**
 * Linear gradient.
 */
@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

/**
 * Flexbox mixins.
 * This mixins allows you to use CSS3 Flexbox widly, cuz it makes fallback
 * for old syntax.
 * Supports: http://caniuse.com/#feat=flexbox
 */

/**
 * display: flexbox
 */
@mixin flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: -moz-flex;
  display: flex;
}

/**
 * display: inline-flex
 */
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: -moz-inline-flex;
  display: inline-flex;
}

/**
 * flex-direction: row | row-reverse | column | column-reverse
 * row: left to right
 * row-reverse: right ro left
 * column: top to bottom
 * column-reverse: bottom to top
 */
@mixin flex-direction($direction: row) {
  @if $direction == row-reverse {
    -webkit-box-direction: reverse;
		-webkit-box-orient: horizontal
  }
  @else if $direction == column {
    -webkit-box-direction: normal;
		-webkit-box-orient: vertical;
  }
  @else if $direction == column-reverse {
    -webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
  }
  @else {
    -webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

/**
 * flex-wrap: nowrap | wrap | wrap-reverse
 * nowrap: single line
 * wrap: multiline
 * wrap-reverse: multiline reverse
 */
@mixin flex-wrap($wrap: nowrap) {
  -webkit-flex-wrap: $wrap;
	-moz-flex-wrap: $wrap;
	@if $wrap == nowrap {
		-ms-flex-wrap: none;
	}
  @else {
		-ms-flex-wrap: $wrap;
	}
	flex-wrap: $wrap;
}

/**
 * flex-flow: <'flex-direction'> || <'flex-wrap'>
 */
@mixin flex-flow($flow: (row nowrap)) {
	-webkit-flex-flow: $flow;
	-moz-flex-flow: $flow;
	-ms-flex-flow: $flow;
	flex-flow: $flow;
}
